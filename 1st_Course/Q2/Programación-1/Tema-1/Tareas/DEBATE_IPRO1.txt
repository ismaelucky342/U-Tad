Las fases del desarrollo de software son fundamentales para lograr un producto final de calidad, en mi opinión la fase de análisis es crucial comprender a fondo los requisitos y necesidades del cliente ya que implica identificar los objetivos reales del software, los usuarios finales que harán uso de él y las posibles limitaciones técnicas que tendrá una vez terminado. 



Un buen análisis al final garantiza que el software cumpla con las expectativas y funcione de manera eficiente.



El diseño de software creo que es otra fase crucial, donde creamos una representación visual y conceptual de cómo funcionará el software por lo que creo que el diseño debe ser claro, estructurado y fácil de entender. 



Un buen diseño debería incorporar como ya hemos visto modularidad, reutilización de código y la escalabilidad para asegurar que el algoritmo generado sea muy eficiente y a la vez fácil de mantener.



Ventajas de utilizar el pseudocódigo como herramienta de definición de un algoritmo. 



El pseudocódigo como forma de definir los algoritmos una vez realizado el diseño me parece una herramienta crucial por varias razones, en primer lugar es un lenguaje simplificado y no está ligado a ninguna sintaxis de lenguajes de alto nivel asique puede ser entendido y utilizado por diferentes programadores, por esto mismo además considero que ofrece una representación mas clara de la propia lógica del algoritmo, que resulta aún mas crucial a la hora de detectar posibles problemas antes de implementar el código.



Ventajas e inconvenientes de los lenguajes compilados e interpretados. 



Para las ventajas y desventajas de los lenguajes compilados e interpretados empezaré mencionando que yo he tenido la oportunidad de trabajar con ambos prácticamente opuestos (C++ y Python respectivamente), por ello en primer lugar enumeraré las claras ventajas y desventajas de ambos: 



Para lenguajes compilados su ventaja más clara es que suelen ser más rápidos, ya que se traducen directamente a código máquina nativo teniendo una mayor eficiencia en la ejecución del programa. Lo que a su vez acarrea una desventaja clara ya que pueden requerir más tiempo de compilación y ser menos flexibles. 



Aun así, he podido comprobar que la compilación permite detectar errores de sintaxis y otros problemas en tiempo de compilación que de otra forma no hubiera podido detectar, lo que a grandes rasgos en un proyecto creo que facilita la depuración y mejora la calidad del código.



Por otro lado, los lenguajes interpretados presentan facilidad de aprendizaje y utilización, ya que no requieren de un proceso de compilación previo todo ello porque creo que poseen una sintaxis más sencilla y legible. Y como ultima ventaja mencionaré que al no estar ligados a una arquitectura como los compilados, pueden ejecutarse en diferentes sistemas operativos sin necesidad de recompilar el código, sin embargo, esto puede acarrear una ejecución tremendamente lenta y por experiencia el hecho de no tener un compilador acarrea que en la mayoría de los casos pases por alto errores de código que van a dificultar el funcionamiento del programa final. 



En qué consiste el proceso de depuración de código y su importancia frente a otras fases del desarrollo.



El proceso de depuración de código es esencial en el desarrollo de software ya que identifica y corrige los errores y fallos en el código. La depuración yo creo que es de las fases más importantes porque ayuda a garantizar que el software funcione correctamente y cumpla con los requisitos establecidos, lo que ahorra tiempo y dinero en un futuro. 



Qué me aporta la programación estructurada a la hora de hacer un desarrollo software. 



Creo que la programación estructurada aporta sobre todo beneficios a la hora de desarrollar software, en primer lugar, el hecho de que dividamos los problemas en módulos más pequeños creo que facilita en gran medida la comprensión general del código y ayuda a resolverlos uno por uno y a detectar en ocasiones errores adicionales. 

Además, creo que el hecho de dividir el programa lo hace mas reutilizable, en el sentido de que evita duplicaciones de código que se puedan producir y facilita que en un futuro el código pueda ser actualizado sin ser afectado y mantenido con mayor facilidad.Fase de análisis de un problema, buen diseño software y propiedades de algoritmo.

 

Las fases del desarrollo de software son fundamentales para lograr un producto final de calidad, en mi opinión la fase de análisis es crucial comprender a fondo los requisitos y necesidades del cliente ya que implica identificar los objetivos reales del software, los usuarios finales que harán uso de él y las posibles limitaciones técnicas que tendrá una vez terminado. 



Un buen análisis al final garantiza que el software cumpla con las expectativas y funcione de manera eficiente.



El diseño de software creo que es otra fase crucial, donde creamos una representación visual y conceptual de cómo funcionará el software por lo que creo que el diseño debe ser claro, estructurado y fácil de entender. 



Un buen diseño debería incorporar como ya hemos visto modularidad, reutilización de código y la escalabilidad para asegurar que el algoritmo generado sea muy eficiente y a la vez fácil de mantener.



Ventajas de utilizar el pseudocódigo como herramienta de definición de un algoritmo. 



El pseudocódigo como forma de definir los algoritmos una vez realizado el diseño me parece una herramienta crucial por varias razones, en primer lugar es un lenguaje simplificado y no está ligado a ninguna sintaxis de lenguajes de alto nivel asique puede ser entendido y utilizado por diferentes programadores, por esto mismo además considero que ofrece una representación mas clara de la propia lógica del algoritmo, que resulta aún mas crucial a la hora de detectar posibles problemas antes de implementar el código.



Ventajas e inconvenientes de los lenguajes compilados e interpretados. 



Para las ventajas y desventajas de los lenguajes compilados e interpretados empezaré mencionando que yo he tenido la oportunidad de trabajar con ambos prácticamente opuestos (C++ y Python respectivamente), por ello en primer lugar enumeraré las claras ventajas y desventajas de ambos: 



Para lenguajes compilados su ventaja más clara es que suelen ser más rápidos, ya que se traducen directamente a código máquina nativo teniendo una mayor eficiencia en la ejecución del programa. Lo que a su vez acarrea una desventaja clara ya que pueden requerir más tiempo de compilación y ser menos flexibles. 



Aun así, he podido comprobar que la compilación permite detectar errores de sintaxis y otros problemas en tiempo de compilación que de otra forma no hubiera podido detectar, lo que a grandes rasgos en un proyecto creo que facilita la depuración y mejora la calidad del código.



Por otro lado, los lenguajes interpretados presentan facilidad de aprendizaje y utilización, ya que no requieren de un proceso de compilación previo todo ello porque creo que poseen una sintaxis más sencilla y legible. Y como ultima ventaja mencionaré que al no estar ligados a una arquitectura como los compilados, pueden ejecutarse en diferentes sistemas operativos sin necesidad de recompilar el código, sin embargo, esto puede acarrear una ejecución tremendamente lenta y por experiencia el hecho de no tener un compilador acarrea que en la mayoría de los casos pases por alto errores de código que van a dificultar el funcionamiento del programa final. 



En qué consiste el proceso de depuración de código y su importancia frente a otras fases del desarrollo.



El proceso de depuración de código es esencial en el desarrollo de software ya que identifica y corrige los errores y fallos en el código. La depuración yo creo que es de las fases más importantes porque ayuda a garantizar que el software funcione correctamente y cumpla con los requisitos establecidos, lo que ahorra tiempo y dinero en un futuro. 



Qué me aporta la programación estructurada a la hora de hacer un desarrollo software. 



Creo que la programación estructurada aporta sobre todo beneficios a la hora de desarrollar software, en primer lugar, el hecho de que dividamos los problemas en módulos más pequeños creo que facilita en gran medida la comprensión general del código y ayuda a resolverlos uno por uno y a detectar en ocasiones errores adicionales. 

Además, creo que el hecho de dividir el programa lo hace mas reutilizable, en el sentido de que evita duplicaciones de código que se puedan producir y facilita que en un futuro el código pueda ser actualizado sin ser afectado y mantenido con mayor facilidad.